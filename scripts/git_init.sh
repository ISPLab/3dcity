#!/bin/bash

# Script to deploy 3DCityDB project to GitHub with Git LFS
# Repository: git@github.com:ISPLab/3dcity.git

# Color codes for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

echo -e "${GREEN}=== 3DCityDB GitHub Deployment Script ===${NC}"
echo "This script will prepare and push your 3DCityDB project to GitHub with Git LFS."

# Check if Git is installed
if ! command -v git &> /dev/null; then
    echo -e "${RED}Error: Git is not installed. Please install Git first.${NC}"
    echo "Visit https://git-scm.com/downloads for installation instructions."
    exit 1
fi

# Check if Git LFS is installed
if ! command -v git-lfs &> /dev/null; then
    echo -e "${RED}Error: Git LFS is not installed. Please install Git LFS first.${NC}"
    echo "Visit https://git-lfs.github.com/ for installation instructions."
    exit 1
fi

# Set repository URL
REPO_URL="git@github.com:ISPLab/3dcity.git"
CURRENT_DIR=$(pwd)
GIT_DIR="$CURRENT_DIR/.git"

# Check if we're already in a git repository
if [ -d "$GIT_DIR" ]; then
    echo -e "${YELLOW}This directory is already a git repository.${NC}"
    
    # Check if the remote is correct
    CURRENT_REMOTE=$(git config --get remote.origin.url || echo "")
    
    if [ "$CURRENT_REMOTE" = "$REPO_URL" ]; then
        echo "Remote is already set to $REPO_URL"
    else
        read -p "Do you want to change the remote to $REPO_URL? (y/n): " CHANGE_REMOTE
        if [ "$CHANGE_REMOTE" = "y" ] || [ "$CHANGE_REMOTE" = "Y" ]; then
            if [ -z "$CURRENT_REMOTE" ]; then
                git remote add origin "$REPO_URL"
            else
                git remote set-url origin "$REPO_URL"
            fi
            echo "Remote set to $REPO_URL"
        fi
    fi
else
    # Initialize a new git repository
    echo "Initializing a new git repository..."
    git init
    git remote add origin "$REPO_URL"
    echo "Repository initialized with remote: $REPO_URL"
fi

# Setup Git LFS
echo "Setting up Git LFS..."
git lfs install

# Configure Git LFS to track large files
echo "Configuring Git LFS to track 3D model files and other large assets..."
git lfs track "*.max"      # 3ds Max files
git lfs track "*.gml"      # CityGML files
git lfs track "*.dae"      # Collada files
git lfs track "*.obj"      # OBJ files
git lfs track "*.mtl"      # MTL files
git lfs track "*.fbx"      # FBX files
git lfs track "*.gltf"     # glTF files
git lfs track "*.glb"      # Binary glTF files
git lfs track "*.jpg"      # JPEG images
git lfs track "*.jpeg"     # JPEG images
git lfs track "*.png"      # PNG images
git lfs track "*.tif"      # TIFF images
git lfs track "*.tiff"     # TIFF images
git lfs track "*.zip"      # ZIP archives
git lfs track "*.bin"      # Binary files
git lfs track "*.kml"      # KML files
git lfs track "data/**"    # All files in data directory

# Add .gitattributes to the repository
git add .gitattributes
git commit -m "Configure Git LFS for 3D assets and large files"

# Create .gitignore file if it doesn't exist
if [ ! -f .gitignore ]; then
    echo "Creating .gitignore file..."
    cat > .gitignore << EOF
# Logs
logs
*.log

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage

# nyc test coverage
.nyc_output

# Dependency directories
node_modules/
jspm_packages/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# dotenv environment variable files
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# Mac files
.DS_Store

# Windows files
Thumbs.db
ehthumbs.db
Desktop.ini

# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
env/
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg
venv/
ENV/

# Java
*.class
*.jar
*.war
*.ear
*.zip
*.tar.gz
*.rar
hs_err_pid*
.gradle
.idea
*.iml
*.iws
*.ipr
out/
.idea_modules/
target/

# Database
*.sqlite
*.sqlite3
*.db

# 3DCityDB specific
# Add specific patterns for your project if needed
EOF
    
    git add .gitignore
    git commit -m "Add .gitignore file"
    echo "Added .gitignore file"
fi

# Check if README.md exists
if [ ! -f README.md ]; then
    echo "Creating README.md file..."
    cat > README.md << EOF
# 3DCityDB Project

This repository contains a 3DCityDB implementation with scripts for deployment and visualization.

## Components

1. **3DCityDB Database** - PostgreSQL database with 3DCityDB extensions
2. **3DCityDB Tool** - Command-line interface for managing the database
3. **3DCityDB Web Map Client** - Web-based viewer for 3D city models
4. **3DCityDB Documentation** - Project documentation

## Large Files

This project uses Git LFS to handle large files such as 3D models and textures.
Make sure to install Git LFS before cloning the repository:

\`\`\`bash
# Install Git LFS
# On Ubuntu/Debian:
sudo apt-get install git-lfs

# On macOS:
brew install git-lfs

# On Windows:
# Download and install from https://git-lfs.github.com/

# After installation:
git lfs install
\`\`\`

## Getting Started

See the deployment scripts in the repository for instructions on setting up the 3DCityDB environment.

## License

[Specify the license here]
EOF
    
    git add README.md
    git commit -m "Add README.md file"
    echo "Added README.md file"
fi

# Ask user about pushing changes
echo -e "${YELLOW}Your repository is now prepared with Git LFS.${NC}"
read -p "Do you want to push your changes to GitHub now? (y/n): " PUSH_CHANGES

if [ "$PUSH_CHANGES" = "y" ] || [ "$PUSH_CHANGES" = "Y" ]; then
    echo "Pushing changes to GitHub..."
    
    # Check if we need to set the upstream
    HAS_UPSTREAM=$(git rev-parse --abbrev-ref --symbolic-full-name @{u} 2>/dev/null || echo "")
    
    if [ -z "$HAS_UPSTREAM" ]; then
        echo "Setting upstream branch..."
        DEFAULT_BRANCH=$(git branch --show-current)
        git push -u origin "$DEFAULT_BRANCH"
    else
        git push
    fi
    
    echo -e "${GREEN}Successfully pushed to GitHub!${NC}"
    echo "Repository URL: $REPO_URL"
else
    echo -e "${YELLOW}Not pushing changes. You can push manually later with:${NC}"
    echo "git push -u origin [your-branch-name]"
fi

echo -e "${GREEN}=== Deployment script completed ===${NC}"
echo "To push large files in the future, just use regular git commands."
echo "Git LFS will automatically handle the large files."
